
bin\Debug\ActOneInter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001fe  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000069  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000248  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016b  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000245  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010a  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_1>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
unsigned volatile FLAG = 0;
unsigned volatile FLAG1 = 0;

int main(void)
{
DDRB|=(1<<PB0);
  90:	20 9a       	sbi	0x04, 0	; 4

DDRD&=~(1<<PD2);
  92:	52 98       	cbi	0x0a, 2	; 10
PORTD|=(1<<PD2);
  94:	5a 9a       	sbi	0x0b, 2	; 11
DDRD&=~(1<<PD3);
  96:	53 98       	cbi	0x0a, 3	; 10
PORTD|=(1<<PD3);
  98:	5b 9a       	sbi	0x0b, 3	; 11

EICRA|=(1<<ISC01)|(1<<ISC11);
  9a:	80 91 69 00 	lds	r24, 0x0069
  9e:	8a 60       	ori	r24, 0x0A	; 10
  a0:	80 93 69 00 	sts	0x0069, r24
EIMSK|=(1<<INT0)|(1<<INT1);
  a4:	8d b3       	in	r24, 0x1d	; 29
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	8d bb       	out	0x1d, r24	; 29

sei();
  aa:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ac:	40 e9       	ldi	r20, 0x90	; 144
  ae:	51 e0       	ldi	r21, 0x01	; 1

    while(1){
            if(FLAG==1&&FLAG1==1)
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	90 91 01 01 	lds	r25, 0x0101
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	91 f0       	breq	.+36     	; 0xe0 <main+0x50>
            _delay_ms(5000);
            FLAG = 0;
            FLAG1 = 0;
            }
            else{
            PORTB&=~(1<<PB0);
  bc:	28 98       	cbi	0x05, 0	; 5
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ca 01       	movw	r24, r20
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x34>
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	87 e2       	ldi	r24, 0x27	; 39
  ce:	20 31       	cpi	r18, 0x10	; 16
  d0:	38 07       	cpc	r19, r24
  d2:	b9 f7       	brne	.-18     	; 0xc2 <main+0x32>
EIMSK|=(1<<INT0)|(1<<INT1);

sei();

    while(1){
            if(FLAG==1&&FLAG1==1)
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	90 91 01 01 	lds	r25, 0x0101
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	71 f7       	brne	.-36     	; 0xbc <main+0x2c>
  e0:	80 91 02 01 	lds	r24, 0x0102
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	41 f7       	brne	.-48     	; 0xbc <main+0x2c>
            {
            PORTB|=(1<<PB0);
  ec:	28 9a       	sbi	0x05, 0	; 5
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	ca 01       	movw	r24, r20
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x64>
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	83 ec       	ldi	r24, 0xC3	; 195
  fe:	20 35       	cpi	r18, 0x50	; 80
 100:	38 07       	cpc	r19, r24
 102:	b9 f7       	brne	.-18     	; 0xf2 <main+0x62>
            _delay_ms(5000);
            FLAG = 0;
 104:	10 92 01 01 	sts	0x0101, r1
 108:	10 92 00 01 	sts	0x0100, r1
            FLAG1 = 0;
 10c:	10 92 03 01 	sts	0x0103, r1
 110:	10 92 02 01 	sts	0x0102, r1
 114:	cd cf       	rjmp	.-102    	; 0xb0 <main+0x20>

00000116 <__vector_1>:

    return 0;
}

ISR(INT0_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25

    FLAG = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 01 01 	sts	0x0101, r25
 12c:	80 93 00 01 	sts	0x0100, r24
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_2>:

ISR(INT1_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
    FLAG1 = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 03 01 	sts	0x0103, r25
 154:	80 93 02 01 	sts	0x0102, r24
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
